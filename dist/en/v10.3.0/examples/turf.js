"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2678],{26618:function(e,t,r){var n=r(49208),o=r(41564),i=r(87240),a=r(29810),s=r(28e3),u=r(23986),c=r(12185),l=6371008.8,f={centimeters:637100880,centimetres:637100880,degrees:360/(2*Math.PI),feet:20902260.511392,inches:39.37*l,kilometers:6371.0088,kilometres:6371.0088,meters:l,metres:l,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:l/1852,radians:1,yards:6967335.223679999};function h(e,t,r={}){const n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function y(e,t,r={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!p(e[0])||!p(e[1]))throw new Error("coordinates must contain numbers");return h({type:"Point",coordinates:e},t,r)}function g(e,t,r={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return h({type:"LineString",coordinates:e},t,r)}function m(e,t="kilometers"){const r=f[t];if(!r)throw new Error(t+" units is invalid");return e*r}function d(e,t="kilometers"){const r=f[t];if(!r)throw new Error(t+" units is invalid");return e/r}function M(e){return 180*(e%(2*Math.PI))/Math.PI}function w(e){return e%360*Math.PI/180}function p(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function b(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function P(e,t,r={}){if(!0===r.final)return function(e,t){let r=P(t,e);return r=(r+180)%360,r}(e,t);const n=b(e),o=b(t),i=w(n[0]),a=w(o[0]),s=w(n[1]),u=w(o[1]),c=Math.sin(a-i)*Math.cos(u),l=Math.cos(s)*Math.sin(u)-Math.sin(s)*Math.cos(u)*Math.cos(a-i);return M(Math.atan2(c,l))}function v(e,t,r,n={}){const o=b(e),i=w(o[0]),a=w(o[1]),s=w(r),u=d(t,n.units),c=Math.asin(Math.sin(a)*Math.cos(u)+Math.cos(a)*Math.sin(u)*Math.cos(s));return y([M(i+Math.atan2(Math.sin(s)*Math.sin(u)*Math.cos(a),Math.cos(u)-Math.sin(a)*Math.sin(c))),M(c)],n.properties)}function k(e,t,r={}){var n=b(e),o=b(t),i=w(o[1]-n[1]),a=w(o[0]-n[0]),s=w(n[1]),u=w(o[1]),c=Math.pow(Math.sin(i/2),2)+Math.pow(Math.sin(a/2),2)*Math.cos(s)*Math.cos(u);return m(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),r.units)}function A(e,t,r={}){var n;const o=("Feature"===(n=e).type?n.geometry:n).coordinates;let i=0;for(let e=0;e<o.length&&!(t>=i&&e===o.length-1);e++){if(i>=t){const n=t-i;if(n){const t=P(o[e],o[e-1])-180;return v(o[e],n,t,r)}return y(o[e])}i+=k(o[e],o[e+1],r)}return y(o[o.length-1])}var E=r(25231);function S(e,t,r){if(null!==e)for(var n,o,i,a,s,u,c,l,f=0,h=0,y=e.type,g="FeatureCollection"===y,m="Feature"===y,d=g?e.features.length:1,M=0;M<d;M++){s=(l=!!(c=g?e.features[M].geometry:m?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var w=0;w<s;w++){var p=0,b=0;if(null!==(a=l?c.geometries[w]:c)){u=a.coordinates;var P=a.type;switch(f=!r||"Polygon"!==P&&"MultiPolygon"!==P?0:1,P){case null:break;case"Point":if(!1===t(u,h,M,p,b))return!1;h++,p++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],h,M,p,b))return!1;h++,"MultiPoint"===P&&p++}"LineString"===P&&p++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(o=0;o<u[n].length-f;o++){if(!1===t(u[n][o],h,M,p,b))return!1;h++}"MultiLineString"===P&&p++,"Polygon"===P&&b++}"Polygon"===P&&p++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for(b=0,o=0;o<u[n].length;o++){for(i=0;i<u[n][o].length-f;i++){if(!1===t(u[n][o][i],h,M,p,b))return!1;h++}b++}p++}break;case"GeometryCollection":for(n=0;n<a.geometries.length;n++)if(!1===S(a.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function G(e,t){var r,n,o,i,a,s,u,c,l,f,h=0,y="FeatureCollection"===e.type,g="Feature"===e.type,m=y?e.features.length:1;for(r=0;r<m;r++){for(s=y?e.features[r].geometry:g?e.geometry:e,c=y?e.features[r].properties:g?e.properties:{},l=y?e.features[r].bbox:g?e.bbox:void 0,f=y?e.features[r].id:g?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,h,c,l,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],h,c,l,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,h,c,l,f))return!1;h++}}function F(e,t){G(e,(function(e,r,n,o,i){var a,s=null===e?null:e.type;switch(s){case null:case"Point":case"LineString":case"Polygon":return!1!==t(h(e,n,{bbox:o,id:i}),r,0)&&void 0}switch(s){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon"}for(var u=0;u<e.coordinates.length;u++){var c=e.coordinates[u];if(!1===t(h({type:a,coordinates:c},n),r,u))return!1}}))}function L(e,t,r){var n=r,o=!1;return function(e,t){F(e,(function(e,r,n){var o=0;if(e.geometry){var i=e.geometry.type;if("Point"!==i&&"MultiPoint"!==i){var a,s=0,u=0,c=0;return!1!==S(e,(function(i,l,f,h,y){if(void 0===a||r>s||h>u||y>c)return a=i,s=r,u=h,c=y,void(o=0);var m=g([a,i],e.properties);if(!1===t(m,r,n,y,o))return!1;o++,a=i}))&&void 0}}}))}(e,(function(e,i,a,s,u){n=!1===o&&void 0===r?e:t(n,e,i,a,s,u),o=!0})),n}function C(e,t={}){return L(e,((e,r)=>{const n=r.geometry.coordinates;return e+k(n[0],n[1],t)}),0)}const x=new a.A;fetch("data/geojson/roads-seoul.geojson").then((function(e){return e.json()})).then((function(e){const t=new n.A,r=t.readFeatures(e)[0],o=t.writeFeatureObject(r),i=C(o,"kilometers");for(let e=1;e<=i/.2;e++){const r=A(o,.2*e,"kilometers"),n=t.readFeature(r);n.getGeometry().transform("EPSG:4326","EPSG:3857"),x.addFeature(n)}r.getGeometry().transform("EPSG:4326","EPSG:3857"),x.addFeature(r)}));const I=new u.A({source:x}),j=new c.A({source:new s.A});new o.A({layers:[j,I],target:document.getElementById("map"),view:new i.Ay({center:(0,E.Rb)([126.980366,37.52654]),zoom:15})})}},function(e){var t;t=26618,e(e.s=t)}]);
//# sourceMappingURL=turf.js.map