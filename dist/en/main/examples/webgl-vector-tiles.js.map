{"version":3,"file":"webgl-vector-tiles.js","mappings":"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","sources":["webpack:///../src/ol/webgl/TileGeometry.js","webpack:///../src/ol/renderer/webgl/VectorTileLayer.js","webpack:///./webgl-vector-tiles.js"],"sourcesContent":["/**\n * @module ol/webgl/TileGeometry\n */\n\nimport MixedGeometryBatch from '../render/webgl/MixedGeometryBatch.js';\nimport {\n  create as createTransform,\n  translate as translateTransform,\n} from '../transform.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport WebGLArrayBuffer from './Buffer.js';\n\n/**\n * @typedef {import(\"../VectorRenderTile\").default} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileGeometry extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   * @param {Array<import(\"../render/webgl/VectorStyleRenderer.js\").default>} styleRenderers Array of vector style renderers\n   */\n  constructor(options, styleRenderers) {\n    super(options);\n\n    /**\n     * @private\n     */\n    this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     */\n    this.styleRenderers_ = styleRenderers;\n\n    /**\n     * @type {Array<import(\"../render/webgl/VectorStyleRenderer.js\").WebGLBuffers>}\n     */\n    this.buffers = [];\n\n    /**\n     * Each geometry tile also has a mask which consisted of a quad (two triangles); this mask is intended to\n     * be rendered to an offscreen buffer, and be used to correctly mask tiles according to their zoom level\n     * during rendering\n     */\n    this.maskVertices = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @private\n   */\n  generateMaskBuffer_() {\n    const extent = this.tile.getSourceTiles()[0].extent;\n    this.maskVertices.fromArray([\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ]);\n    this.helper.flushBufferData(this.maskVertices);\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    this.generateMaskBuffer_();\n\n    this.batch_.clear();\n    const sourceTiles = this.tile.getSourceTiles();\n    const features = sourceTiles.reduce(\n      (accumulator, sourceTile) => accumulator.concat(sourceTile.getFeatures()),\n      [],\n    );\n    this.batch_.addFeatures(features);\n\n    const tileOriginX = sourceTiles[0].extent[0];\n    const tileOriginY = sourceTiles[0].extent[1];\n    const transform = translateTransform(\n      createTransform(),\n      -tileOriginX,\n      -tileOriginY,\n    );\n\n    const generatePromises = this.styleRenderers_.map((renderer, i) =>\n      renderer.generateBuffers(this.batch_, transform).then((buffers) => {\n        this.buffers[i] = buffers;\n      }),\n    );\n    Promise.all(generatePromises).then(() => {\n      this.setReady();\n    });\n  }\n}\n\nexport default TileGeometry;\n","/**\n * @module ol/renderer/webgl/VectorTileLayer\n */\nimport EventType from '../../events/EventType.js';\nimport {getIntersection} from '../../extent.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport {breakDownFlatStyle} from '../../render/webgl/utils.js';\nimport {\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  setFromArray as setFromTransform,\n} from '../../transform.js';\nimport {\n  create as createMat4,\n  fromTransform as mat4FromTransform,\n} from '../../vec/mat4.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {ShaderBuilder} from '../../webgl/ShaderBuilder.js';\nimport TileGeometry from '../../webgl/TileGeometry.js';\nimport {parseLiteralStyle} from '../../webgl/styleparser.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport WebGLBaseTileLayerRenderer, {\n  Uniforms as BaseUniforms,\n} from './TileLayerBase.js';\n\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_MASK_TEXTURE: 'u_depthMask',\n  TILE_ZOOM_LEVEL: 'u_tileZoomLevel',\n};\n\nexport const Attributes = {\n  POSITION: 'a_position',\n};\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsShaders} StyleAsShaders\n */\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsRule} StyleAsRule\n */\n\n/**\n * @typedef {Object} Options\n * @property {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat vector style; also accepts shaders\n * @property {import('../../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {number} [cacheSize=512] The vector tile cache size.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} LayerType\n */\n\n/**\n * @classdesc\n * WebGL renderer for vector tile layers. Experimental.\n * @extends {WebGLBaseTileLayerRenderer<LayerType>}\n */\nclass WebGLVectorTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      cacheSize: options.cacheSize,\n      uniforms: {\n        [Uniforms.PATTERN_ORIGIN]: [0, 0],\n        [Uniforms.TILE_MASK_TEXTURE]: () => this.tileMaskTarget_.getTexture(),\n      },\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {Array<StyleAsRule | StyleAsShaders>}\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {import('../../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    this.styleRenderers_ = [];\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.tmpTransform_ = createTransform();\n    /**\n     * @private\n     */\n    this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.tileMaskTarget_ = null;\n\n    /**\n     * @private\n     */\n    this.tileMaskIndices_ = new WebGLArrayBuffer(\n      ELEMENT_ARRAY_BUFFER,\n      STATIC_DRAW,\n    );\n    this.tileMaskIndices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.tileMaskAttributes_ = [\n      {\n        name: Attributes.POSITION,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n    ];\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.tileMaskProgram_;\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n\n    this.applyOptions_(options);\n    if (this.helper) {\n      this.createRenderers_();\n      this.initTileMask_();\n    }\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @private\n   */\n  applyOptions_(options) {\n    this.styles_ = breakDownFlatStyle(options.style);\n  }\n\n  /**\n   * @private\n   */\n  createRenderers_() {\n    function addBuilderParams(builder) {\n      const exisitingDiscard = builder.getFragmentDiscardExpression();\n      const discardFromMask = `texture2D(${Uniforms.TILE_MASK_TEXTURE}, gl_FragCoord.xy / u_pixelRatio / u_viewportSizePx).r * 50. > ${Uniforms.TILE_ZOOM_LEVEL} + 0.5`;\n      builder.setFragmentDiscardExpression(\n        exisitingDiscard !== 'false'\n          ? `(${exisitingDiscard}) || (${discardFromMask})`\n          : discardFromMask,\n      );\n      builder.addUniform(`sampler2D ${Uniforms.TILE_MASK_TEXTURE}`);\n      builder.addUniform(`float ${Uniforms.TILE_ZOOM_LEVEL}`);\n    }\n\n    this.styleRenderers_ = this.styles_.map((style) => {\n      const isShaders = 'builder' in style;\n      /** @type {StyleAsShaders} */\n      let shaders;\n      if (!isShaders) {\n        const parseResult = parseLiteralStyle(\n          style.style,\n          this.styleVariables_,\n          style.filter,\n        );\n        addBuilderParams(parseResult.builder);\n        shaders = {\n          builder: parseResult.builder,\n          attributes: parseResult.attributes,\n          uniforms: parseResult.uniforms,\n        };\n      } else {\n        addBuilderParams(style.builder);\n        shaders = style;\n      }\n      return new VectorStyleRenderer(\n        shaders,\n        this.styleVariables_,\n        this.helper,\n        this.hitDetectionEnabled_,\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  initTileMask_() {\n    this.tileMaskTarget_ = new WebGLRenderTarget(this.helper);\n    const builder = new ShaderBuilder()\n      .setFillColorExpression(\n        `vec4(${Uniforms.TILE_ZOOM_LEVEL} / 50., 0., 0., 1.)`,\n      )\n      .addUniform(`float ${Uniforms.TILE_ZOOM_LEVEL}`);\n    this.tileMaskProgram_ = this.helper.getProgram(\n      builder.getFillFragmentShader(),\n      builder.getFillVertexShader(),\n    );\n    this.helper.flushBufferData(this.tileMaskIndices_);\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    this.createRenderers_();\n    this.initTileMask_();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    const tileRep = new TileGeometry(options, this.styleRenderers_);\n    // redraw the layer when the tile is ready\n    const listener = () => {\n      if (tileRep.ready) {\n        this.getLayer().changed();\n        tileRep.removeEventListener(EventType.CHANGE, listener);\n      }\n    };\n    tileRep.addEventListener(EventType.CHANGE, listener);\n    return tileRep;\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, true); // always consider that tiles need alpha blending\n    this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_,\n    );\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesMaskRender(frameState) {\n    this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_,\n    );\n    const pixelRatio = frameState.pixelRatio;\n    const size = frameState.size;\n    this.tileMaskTarget_.setSize([size[0] * pixelRatio, size[1] * pixelRatio]);\n    this.helper.prepareDrawToRenderTarget(\n      frameState,\n      this.tileMaskTarget_,\n      true,\n      true,\n    );\n    this.helper.useProgram(this.tileMaskProgram_, frameState);\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n    makeInverseTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n    this.helper.setUniformFloatValue(Uniforms.TILE_ZOOM_LEVEL, tileZ);\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, extent);\n    this.helper.setUniformFloatValue(Uniforms.GLOBAL_ALPHA, 1);\n    this.helper.bindBuffer(\n      /** @type {TileGeometry} */ (tileRepresentation).maskVertices,\n    );\n    this.helper.bindBuffer(this.tileMaskIndices_);\n    this.helper.enableAttributes(this.tileMaskAttributes_);\n    const renderCount = this.tileMaskIndices_.getSize();\n    this.helper.drawElements(0, renderCount);\n  }\n\n  /**\n   * @param {number} alpha Alpha value of the tile\n   * @param {import(\"../../extent.js\").Extent} renderExtent Which extent to restrict drawing to\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which tile geometries are expressed\n   * @param {number} tileZ Tile zoom level\n   * @param {number} depth Depth of the tile\n   * @private\n   */\n  applyUniforms_(alpha, renderExtent, batchInvertTransform, tileZ, depth) {\n    // world to screen matrix\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n\n    // screen to world matrix\n    makeInverseTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n\n    this.helper.setUniformFloatValue(Uniforms.GLOBAL_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n    this.helper.setUniformFloatValue(Uniforms.TILE_ZOOM_LEVEL, tileZ);\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, renderExtent);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(\n    tileRepresentation,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {\n    const gutterExtent = getIntersection(tileExtent, renderExtent, tileExtent);\n    const tileZ = tileRepresentation.tile.getTileCoord()[0];\n    for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n      const renderer = this.styleRenderers_[i];\n      const buffers = tileRepresentation.buffers[i];\n      renderer.render(buffers, frameState, () => {\n        this.applyUniforms_(\n          alpha,\n          gutterExtent,\n          buffers.invertVerticesTransform,\n          tileZ,\n          depth,\n        );\n      });\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLVectorTileLayerRenderer;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {asArray} from '../src/ol/color.js';\nimport MVT from '../src/ol/format/MVT.js';\nimport VectorTile from '../src/ol/layer/VectorTile.js';\nimport WebGLVectorTileLayerRenderer from '../src/ol/renderer/webgl/VectorTileLayer.js';\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Icon from '../src/ol/style/Icon.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\nimport Text from '../src/ol/style/Text.js';\nimport {packColor, parseLiteralStyle} from '../src/ol/webgl/styleparser.js';\n\nconst key =\n  'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2t0cGdwMHVnMGdlbzMxbDhwazBic2xrNSJ9.WbcTL9uj8JPAsnT9mgb7oQ';\n\nconst parsedStyleResult = parseLiteralStyle({\n  'fill-color': ['get', 'fillColor'],\n  'stroke-color': ['get', 'strokeColor'],\n  'stroke-width': ['get', 'strokeWidth'],\n  'circle-radius': 4,\n  'circle-fill-color': '#777',\n});\n\nclass WebGLVectorTileLayer extends VectorTile {\n  createRenderer() {\n    return new WebGLVectorTileLayerRenderer(this, {\n      style: {\n        builder: parsedStyleResult.builder,\n        attributes: {\n          prop_fillColor: {\n            size: 2,\n            callback: (feature) => {\n              const style = this.getStyle()(feature, 1)[0];\n              const color = asArray(style?.getFill()?.getColor() || '#eee');\n              return packColor(color);\n            },\n          },\n          prop_strokeColor: {\n            size: 2,\n            callback: (feature) => {\n              const style = this.getStyle()(feature, 1)[0];\n              const color = asArray(style?.getStroke()?.getColor() || '#eee');\n              return packColor(color);\n            },\n          },\n          prop_strokeWidth: {\n            size: 1,\n            callback: (feature) => {\n              const style = this.getStyle()(feature, 1)[0];\n              return style?.getStroke()?.getWidth() || 0;\n            },\n          },\n        },\n      },\n    });\n  }\n}\n\nconst map = new Map({\n  layers: [\n    new WebGLVectorTileLayer({\n      source: new VectorTileSource({\n        attributions:\n          '© <a href=\"https://www.mapbox.com/map-feedback/\">Mapbox</a> ' +\n          '© <a href=\"https://www.openstreetmap.org/copyright\">' +\n          'OpenStreetMap contributors</a>',\n        format: new MVT(),\n        url:\n          'https://{a-d}.tiles.mapbox.com/v4/mapbox.mapbox-streets-v6/' +\n          '{z}/{x}/{y}.vector.pbf?access_token=' +\n          key,\n      }),\n      style: createMapboxStreetsV6Style(Style, Fill, Stroke, Icon, Text),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n"],"names":["TileGeometry","BaseTileRepresentation","constructor","options","styleRenderers","super","this","batch_","MixedGeometryBatch","styleRenderers_","buffers","maskVertices","setTile","tile","generateMaskBuffer_","extent","getSourceTiles","fromArray","helper","flushBufferData","uploadTile","clear","sourceTiles","features","reduce","accumulator","sourceTile","concat","getFeatures","addFeatures","tileOriginX","tileOriginY","transform","generatePromises","map","renderer","i","generateBuffers","then","Promise","all","setReady","Uniforms","TILE_MASK_TEXTURE","TILE_ZOOM_LEVEL","Attributes","WebGLVectorTileLayerRenderer","tileLayer","cacheSize","uniforms","PATTERN_ORIGIN","tileMaskTarget_","getTexture","hitDetectionEnabled_","disableHitDetection","styles_","styleVariables_","variables","currentFrameStateTransform_","tmpTransform_","tmpMat4_","tileMaskIndices_","tileMaskAttributes_","name","size","type","FLOAT","tileMaskProgram_","applyOptions_","reset","createRenderers_","initTileMask_","style","addBuilderParams","builder","exisitingDiscard","getFragmentDiscardExpression","discardFromMask","setFragmentDiscardExpression","addUniform","shaders","parseResult","filter","attributes","VectorStyleRenderer","ShaderBuilder","setFillColorExpression","getProgram","getFillFragmentShader","getFillVertexShader","afterHelperCreated","createTileRepresentation","tileRep","listener","ready","getLayer","changed","removeEventListener","EventType","CHANGE","addEventListener","beforeTilesRender","frameState","tilesWithAlpha","makeProjectionTransform","beforeTilesMaskRender","pixelRatio","setSize","prepareDrawToRenderTarget","useProgram","setUniformMatrixValue","PROJECTION_MATRIX","mat4","SCREEN_TO_WORLD_MATRIX","renderTileMask","tileRepresentation","tileZ","depth","setUniformFloatValue","DEPTH","setUniformFloatVec4","RENDER_EXTENT","GLOBAL_ALPHA","bindBuffer","enableAttributes","renderCount","getSize","drawElements","applyUniforms_","alpha","renderExtent","batchInvertTransform","renderTile","tileTransform","tileResolution","tileSize","tileOrigin","tileExtent","gutter","gutterExtent","getTileCoord","ii","length","render","invertVerticesTransform","renderDeclutter","disposeInternal","parsedStyleResult","WebGLVectorTileLayer","VectorTile","createRenderer","prop_fillColor","callback","feature","getStyle","color","getFill","getColor","prop_strokeColor","getStroke","prop_strokeWidth","getWidth","Map","layers","source","attributions","format","MVT","url","createMapboxStreetsV6Style","Style","Fill","Stroke","Icon","Text","target","view","View","center","zoom"],"sourceRoot":""}